{"version":3,"sources":["webpack://typescriptlang-org/./src/templates/glossary.tsx","webpack://typescriptlang-org/../shiki-twoslash/dist/dom.js"],"names":["GlossaryTemplateComponent","props","i","createInternational","useIntl","post","data","markdownRemark","console","log","JSON","stringify","useEffect","setupTwoslashHovers","meta","pageContext","languageMeta","title","description","lang","locale","id","className","style","padding","textAlign","terms","map","t","key","href","display","dangerouslySetInnerHTML","__html","html","exports","resetHover","globalPopover","document","getElementById","getRootRect","element","nodeName","toLowerCase","getBoundingClientRect","parentElement","hover","event","hovered","target","bodyRect","elemRect","message","getAttribute","position","body","top","left","tooltip","createElement","appendChild","txt","innerHTML","textContent","value","rootRect","relativeLeft","x","maxWidth","width","blocks","querySelectorAll","forEach","code","addEventListener","removeEventListener"],"mappings":"qNAiBMA,EAA4B,SAACC,GACjC,IAAMC,GAAIC,QAAqCC,UAEzCC,EAAOJ,EAAMK,KAAKC,eACxB,IAAKF,EAEH,OADAG,EAAQC,IAAI,oBAAqBC,KAAKC,UAAUV,IACzC,+BAGTW,gBAAU,YACRC,WACC,IAEH,IAAMC,EAAOb,EAAMc,YAAYC,aAC/B,OACE,kBAAC,IAAD,CAAQC,MAAOf,EAAE,kBAAmBgB,YAAahB,EAAE,wBAAyBiB,KAAMlB,EAAMc,YAAYK,QAClG,yBAAKC,GAAG,YACN,yBAAKC,UAAU,2DAA2DC,MAAO,CAAEC,QAAS,OAAQC,UAAW,WAA/G,4DAEA,wBAAIH,UAAU,4CAEVR,EAAKY,MAAMC,KAAI,SAAAC,GAAC,OAAI,wBAAIC,IAAKD,EAAEP,IAAI,uBAAGS,KAAM,IAAMF,EAAEP,IAAKO,EAAEG,cAG/D,yBAAKC,wBAAyB,CAAEC,OAAQ5B,EAAK6B,WAkBrD,mBAAgBjC,GAAD,OAAkB,kBAAC,IAAD,CAAMmB,OAAQnB,EAAMc,YAAYK,QAAQ,kBAACpB,EAA8BC,M,+BCzDxGkC,EAAQ,OAAsB,EAE9B,IAWIC,EAAa,WACb,IAAIC,EAAgBC,SAASC,eAAe,6BACxCF,IACAA,EAAcd,MAAMQ,QAAU,SAalCS,EAAc,SAAdA,EAAwBC,GACxB,MAAuC,QAAnCA,EAAQC,SAASC,cACVF,EAAQG,wBAEZJ,EAAYC,EAAQI,gBAG3BC,EAAQ,SAAUC,GAClB,IAAIC,EAAUD,EAAME,OACpB,GAAyB,aAArBD,EAAQN,SACR,OAAON,IACX,IAtCkCK,EAC9BS,EACAC,EAgBAd,EAoBAe,EAAUJ,EAAQK,aAAa,OAC/BC,GAvC8Bb,EAuCGO,EAtCjCE,EAAWZ,SAASiB,KAAKX,wBAItB,CACHY,KAJAL,EAAWV,EAAQG,yBACJY,IAAMN,EAASM,IAI9BC,KAHON,EAASM,KAAOP,EAASO,OAqChCC,IAvBArB,EAAgBC,SAASC,eAAe,iCAExCF,EAAgBC,SAASqB,cAAc,QACzBpC,MAAM+B,SAAW,WAC/BjB,EAAchB,GAAK,4BACnBiB,SAASiB,KAAKK,YAAYvB,IAEvBA,GAkBHwB,EAAMvB,SAASqB,cAAc,YACjCE,EAAIC,UAAYV,EAChBM,EAAQK,YAAcF,EAAIG,MAG1BN,EAAQnC,MAAMQ,QAAU,QACxB2B,EAAQnC,MAAMiC,IAAMF,EAASE,IAFf,GAE+B,KAC7CE,EAAQnC,MAAMkC,KAAOH,EAASG,KAAO,KAErC,IAAIQ,EAAWzB,EAAYQ,GACvBkB,EAAeZ,EAASG,KAAOQ,EAASE,EAC5CT,EAAQnC,MAAM6C,SAAWH,EAASI,MAAQH,EAAe,MAiC7D/B,EAAQ,EAbkB,WACtB,IAAImC,EAAShC,SAASiC,iBAAiB,mCAKvC,OAJAD,EAAOE,SAAQ,SAAUC,GACrBA,EAAKC,iBAAiB,YAAa5B,GACnC2B,EAAKC,iBAAiB,WAAYtC,MAE/B,WACHkC,EAAOE,SAAQ,SAAUC,GACrBA,EAAKE,oBAAoB,YAAa7B,GACtC2B,EAAKE,oBAAoB,WAAYvC","file":"component---src-templates-glossary-tsx-3581392feba41de4bd1c.js","sourcesContent":["import React, { useEffect } from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport { Layout } from \"../components/layout\"\n\nimport { useIntl } from \"react-intl\";\nimport { createInternational } from \"../lib/createInternational\"\nimport { Intl } from \"../components/Intl\"\nimport { headCopy } from \"../copy/en/head-seo\"\n\nimport \"./markdown.scss\"\nimport \"./glossary.scss\"\n\nimport { setupTwoslashHovers } from \"shiki-twoslash/dist/dom\"\n\ntype Props = { pageContext: any, data: GatsbyTypes.TSConfigReferenceTemplateQuery, path: string }\n\nconst GlossaryTemplateComponent = (props) => {\n  const i = createInternational<typeof headCopy>(useIntl())\n\n  const post = props.data.markdownRemark\n  if (!post) {\n    console.log(\"Could not render:\", JSON.stringify(props))\n    return <div></div>\n  }\n\n  useEffect(() => {\n    setupTwoslashHovers()\n  }, [])\n\n  const meta = props.pageContext.languageMeta as typeof import(\"../../../glossary/output/en.json\")\n  return (\n    <Layout title={i(\"tsconfig_title\")} description={i(\"tsconfig_description\")} lang={props.pageContext.locale}>\n      <div id=\"glossary\">\n        <div className=\"whitespace raised content main-content-block subheadline\" style={{ padding: \"1rem\", textAlign: \"center\" }}>This page is a work in progress, congrats on finding it!</div>\n\n        <ul className=\"filterable-quicklinks main-content-block\">\n          {\n            meta.terms.map(t => <li key={t.id}><a href={\"#\" + t.id}>{t.display}</a></li>)\n          }\n        </ul>\n        <div dangerouslySetInnerHTML={{ __html: post.html! }} />\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query GlossaryTemplate($glossaryPath: String!) {\n    markdownRemark(fileAbsolutePath: {eq: $glossaryPath} ) {\n      id\n      html\n      frontmatter {\n        permalink\n      }\n    }\n  }\n`\n\nexport default (props: Props) => <Intl locale={props.pageContext.locale}><GlossaryTemplateComponent {...props} /></Intl>\n","\"use strict\";\nexports.__esModule = true;\nexports.setupTwoslashHovers = void 0;\n// Gets the position of an element relative to the whole page\nvar getAbsoluteElementPos = function (element) {\n    var bodyRect = document.body.getBoundingClientRect();\n    var elemRect = element.getBoundingClientRect();\n    var top = elemRect.top - bodyRect.top;\n    var left = elemRect.left - bodyRect.left;\n    return {\n        top: top,\n        left: left\n    };\n};\n// Hide it\nvar resetHover = function () {\n    var globalPopover = document.getElementById(\"twoslash-mouse-hover-info\");\n    if (globalPopover)\n        globalPopover.style.display = \"none\";\n};\n// Get it\nvar findOrCreateTooltip = function () {\n    var globalPopover = document.getElementById(\"twoslash-mouse-hover-info\");\n    if (!globalPopover) {\n        globalPopover = document.createElement(\"div\");\n        globalPopover.style.position = \"absolute\";\n        globalPopover.id = \"twoslash-mouse-hover-info\";\n        document.body.appendChild(globalPopover);\n    }\n    return globalPopover;\n};\nvar getRootRect = function (element) {\n    if (element.nodeName.toLowerCase() === \"pre\") {\n        return element.getBoundingClientRect();\n    }\n    return getRootRect(element.parentElement);\n};\n// Gets triggered on the spans inside the codeblocks\nvar hover = function (event) {\n    var hovered = event.target;\n    if (hovered.nodeName !== \"DATA-LSP\")\n        return resetHover();\n    var message = hovered.getAttribute(\"lsp\");\n    var position = getAbsoluteElementPos(hovered);\n    // Create or re-use the current hover div\n    var tooltip = findOrCreateTooltip();\n    // Use a textarea to un-htmlencode for presenting to the user\n    var txt = document.createElement(\"textarea\");\n    txt.innerHTML = message;\n    tooltip.textContent = txt.value;\n    // Offset it a bit from the mouse and present it at an absolute position\n    var yOffset = 20;\n    tooltip.style.display = \"block\";\n    tooltip.style.top = position.top + yOffset + \"px\";\n    tooltip.style.left = position.left + \"px\";\n    // limit the width of the tooltip to the outer container (pre)\n    var rootRect = getRootRect(hovered);\n    var relativeLeft = position.left - rootRect.x;\n    tooltip.style.maxWidth = rootRect.width - relativeLeft + \"px\";\n};\n/**\n * Creates the main mouse over popup for LSP info using the DOM API.\n * It is expected to be run inside a `useEffect` block inside your main\n * exported component in Gatsby.\n *\n * @example\n * import React, { useEffect } from \"react\"\n * import { setupTwoslashHovers } from \"shiki-twoslash/dom\";\n *\n * export default () => {\n *   // Add a the hovers\n *   useEffect(setupTwoslashHovers)\n *\n *   // Normal JSX\n *   return </>\n * }\n *\n */\nvar setupTwoslashHovers = function () {\n    var blocks = document.querySelectorAll(\".shiki.lsp .code-container code\");\n    blocks.forEach(function (code) {\n        code.addEventListener(\"mouseover\", hover);\n        code.addEventListener(\"mouseout\", resetHover);\n    });\n    return function () {\n        blocks.forEach(function (code) {\n            code.removeEventListener(\"mouseover\", hover);\n            code.removeEventListener(\"mouseout\", resetHover);\n        });\n    };\n};\nexports.setupTwoslashHovers = setupTwoslashHovers;\n"],"sourceRoot":""}