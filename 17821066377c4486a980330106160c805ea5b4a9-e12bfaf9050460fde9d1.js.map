{"version":3,"sources":["webpack://typescriptlang-org/../node_modules/babel-loader/lib/node_modules/ts-debounce/dist/src/index.js","webpack://typescriptlang-org/../src/utils.ts","webpack://typescriptlang-org/../src/index.ts","webpack://typescriptlang-org/../src/validation.ts","webpack://typescriptlang-org//home/runner/work/TypeScript-Website/TypeScript-Website/packages/ts-twoslasher/dist|sync|/^.*th$/","webpack://typescriptlang-org/../typescript-vfs/dist|sync"],"names":["exports","i","o","e","n","t","a","isImmediate","r","maxWait","u","Date","now","c","v","slice","call","arguments","this","apply","clearTimeout","setTimeout","cancel","parsePrimitive","value","type","hasLocalStorage","hasProcess","log","localStorage","process","console","highlights","queries","nextContentOffset","contentOffset","removedLines","line","codeLines","moveForward","stripLine","queryMatch","removePrettierIgnoreMatch","completionsQuery","start","kind","offset","text","docs","highlightMatch","length","position","description","result","optMap","key","keys","Array","opt","name","opts","elementType","strings","getOptionValueFromMap","ts","booleanConfigRegexp","valuedConfigRegexp","defaultHandbookOptions","errors","noErrors","showEmit","showEmittedFile","noStaticSemanticInfo","emit","noErrorValidation","twoslasher","code","extension","options","require","lzstring","originalCode","safeExtension","types","typesToExtension","defaultFileName","defaultCompilerOptions","strict","target","allowJs","validateInput","cleanMarkdownEscaped","handbookOptions","match","filterHandbookOptions","compilerOptions","setOption","filterCompilerOptions","getRoot","path","pa","rootPath","useFS","vfs","system","createSystem","createFSBackedSystem","fsRoot","env","createVirtualTypeScriptEnvironment","nameContent","splitTwoslashCodeInfoFiles","sourceFiles","filenames","nc","file","filename","filetype","allowJSON","newFileCode","updates","filterHighlightLines","lspedQueries","string","index","sourceFile","q","quickInfo","ls","arr","dp","d","word","str","pos","String","Number","left","right","startPos","getClosestWord","lastDot","prefix","completions","completionPrefix","newEditedFileCode","allCodeLines","f","output","errs","staticQuickInfos","source","fileContentStartIndexInModifiedFile","linesAbove","textSpans","checkChildren","node","child","span","getIdentifierTextSpans","identifier","targetString","burnerSourceFile","character","partialQueries","completionsPrefix","relevantErrors","inErrsButNotFoundInTheHeader","errorsFound","codeToAdd","postfix","afterMessage","msg","validateCodeForErrors","err","codeWhereErrorLives","renderedMessage","id","category","emitFilename","emitSourceFilename","emitSource","allFiles","playgroundURL","cutString","cutIndex","lineOffset","info","s","highlight","lines","nameForFile","currentFileContent","fileMap","root","debugLog","sys","rootFiles","customTransformers","mergedCompilerOpts","fileNames","createVirtualCompilerHost","compilerHost","updateFile","fileVersions","projectVersion","languageServiceHost","getProjectVersion","getCompilationSettings","getCustomTransformers","getScriptFileNames","getScriptSnapshot","fileName","contents","getScriptVersion","writeFile","createVirtualLanguageServiceHost","languageService","diagnostics","getSourceFile","createFile","prevSourceFile","prevFullContents","prevTextSpan","optPrevTextSpan","newText","newSourceFile","newLength","content","knownLibFilesForCompilerOptions","array","lib","files","targetToCut","matches","targetCutIndex","indexesForCutting","libCutIndex","getMax","current","finalCutIndex","Math","createDefaultMapFromCDN","fetchlike","fetcher","storelike","storer","fsMap","cache","Object","Promise","cacheKey","resp","notImplemented","methodName","audit","args","res","fn","smallres","jsx","esModuleInterop","module","suppressOutputPathCheck","skipLibCheck","skipDefaultLibCheck","moduleResolution","NodeJs","libize","createDirectory","directoryExists","directory","exit","fileExists","getCurrentDirectory","getDirectories","getExecutingFilePath","readDirectory","readFile","resolvePath","newLine","useCaseSensitiveFileNames","write","_projectRoot","requirePath","nodeSys","tsLib","tsLibName","libs","getCanonicalFileName","getDefaultLibFileName","getNewLine","alreadyExists","webpackEmptyContext","req","Error","resolve"],"mappings":"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","file":"17821066377c4486a980330106160c805ea5b4a9-e12bfaf9050460fde9d1.js","sourcesContent":["exports.debounce = function (i, o, e) {\n  var n, t;\n  void 0 === o && (o = 50), void 0 === e && (e = {});\n  var a = null != (n = e.isImmediate) && n,\n      r = e.maxWait,\n      u = Date.now();\n\n  function c() {\n    if (void 0 !== r) {\n      var i = Date.now() - u;\n      if (i + o >= r) return r - i;\n    }\n\n    return o;\n  }\n\n  var v = function v() {\n    var o = [].slice.call(arguments),\n        e = this,\n        n = function n() {\n      t = void 0, u = Date.now(), a || i.apply(e, o);\n    },\n        r = a && void 0 === t;\n\n    void 0 !== t && clearTimeout(t), t = setTimeout(n, c()), r && i.apply(e, o);\n  };\n\n  return v.cancel = function () {\n    void 0 !== t && clearTimeout(t);\n  }, v;\n};","export function escapeHtml(text: string) {\n  return text.replace(/</g, \"&lt;\")\n}\n\nexport function strrep(text: string, count: number) {\n  let s = \"\"\n  for (let i = 0; i < count; i++) {\n    s += text\n  }\n  return s\n}\n\nexport function textToAnchorName(text: string) {\n  return text\n    .toLowerCase()\n    .replace(/ /g, \"-\")\n    .replace(/`|#|\\//g, \"\")\n}\n\nexport function fileNameToUrlName(s: string) {\n  return s.replace(/ /g, \"-\").replace(/#/g, \"sharp\").toLowerCase()\n}\n\nexport function parsePrimitive(value: string, type: string): any {\n  switch (type) {\n    case \"number\":\n      return +value\n    case \"string\":\n      return value\n    case \"boolean\":\n      return value.toLowerCase() === \"true\" || value.length === 0\n  }\n\n  throw new Error(`Unknown primitive type ${type} with - ${value}`)\n}\n\nexport function cleanMarkdownEscaped(code: string) {\n  code = code.replace(/¨D/g, \"$\")\n  code = code.replace(/¨T/g, \"~\")\n  return code\n}\n\nexport function typesToExtension(types: string) {\n  switch (types) {\n    case \"js\":\n      return \"js\"\n    case \"javascript\":\n      return \"js\"\n    case \"ts\":\n      return \"ts\"\n    case \"typescript\":\n      return \"ts\"\n    case \"tsx\":\n      return \"tsx\"\n    case \"jsn\":\n      return \"json\"\n  }\n  throw new Error(\"Cannot handle the file extension:\" + types)\n}\n\nexport function getIdentifierTextSpans(ts: typeof import(\"typescript\"), sourceFile: import(\"typescript\").SourceFile) {\n  const textSpans: { span: import(\"typescript\").TextSpan; text: string }[] = []\n  checkChildren(sourceFile)\n  return textSpans\n\n  function checkChildren(node: import(\"typescript\").Node) {\n    ts.forEachChild(node, child => {\n      if (ts.isIdentifier(child)) {\n        const start = child.getStart(sourceFile, false)\n        textSpans.push({ span: ts.createTextSpan(start, child.end - start), text: child.getText(sourceFile) })\n      }\n      checkChildren(child)\n    })\n  }\n}\n\nexport function stringAroundIndex(string: string, index: number) {\n  const arr = [\n    string[index - 3],\n    string[index - 2],\n    string[index - 1],\n    \">\",\n    string[index],\n    \"<\",\n    string[index + 1],\n    string[index + 2],\n    string[index + 3],\n  ]\n  return arr.filter(Boolean).join(\"\")\n}\n\n/** Came from https://ourcodeworld.com/articles/read/223/how-to-retrieve-the-closest-word-in-a-string-with-a-given-index-in-javascript */\nexport function getClosestWord(str: string, pos: number) {\n  // Make copies\n  str = String(str)\n  pos = Number(pos) >>> 0\n\n  // Search for the word's beginning and end.\n  var left = str.slice(0, pos + 1).search(/\\S+$/),\n    right = str.slice(pos).search(/\\s/)\n\n  // The last word in the string is a special case.\n  if (right < 0) {\n    return {\n      word: str.slice(left),\n      startPos: left,\n    }\n  }\n  // Return the word, using the located bounds to extract it from the string.\n  return {\n    word: str.slice(left, right + pos),\n    startPos: left,\n  }\n}\n","type System = import(\"typescript\").System\ntype CompilerOptions = import(\"typescript\").CompilerOptions\ntype CustomTransformers = import(\"typescript\").CustomTransformers\ntype LanguageServiceHost = import(\"typescript\").LanguageServiceHost\ntype CompilerHost = import(\"typescript\").CompilerHost\ntype SourceFile = import(\"typescript\").SourceFile\ntype TS = typeof import(\"typescript\")\n\nlet hasLocalStorage = false\ntry {\n  hasLocalStorage = typeof localStorage !== `undefined`\n} catch (error) {}\n\nconst hasProcess = typeof process !== `undefined`\nconst shouldDebug = (hasLocalStorage && localStorage.getItem(\"DEBUG\")) || (hasProcess && process.env.DEBUG)\nconst debugLog = shouldDebug ? console.log : (_message?: any, ..._optionalParams: any[]) => \"\"\n\nexport interface VirtualTypeScriptEnvironment {\n  sys: System\n  languageService: import(\"typescript\").LanguageService\n  getSourceFile: (fileName: string) => import(\"typescript\").SourceFile | undefined\n  createFile: (fileName: string, content: string) => void\n  updateFile: (fileName: string, content: string, replaceTextSpan?: import(\"typescript\").TextSpan) => void\n}\n\n/**\n * Makes a virtual copy of the TypeScript environment. This is the main API you want to be using with\n * @typescript/vfs. A lot of the other exposed functions are used by this function to get set up.\n *\n * @param sys an object which conforms to the TS Sys (a shim over read/write access to the fs)\n * @param rootFiles a list of files which are considered inside the project\n * @param ts a copy pf the TypeScript module\n * @param compilerOptions the options for this compiler run\n * @param customTransformers custom transformers for this compiler run\n */\n\nexport function createVirtualTypeScriptEnvironment(\n  sys: System,\n  rootFiles: string[],\n  ts: TS,\n  compilerOptions: CompilerOptions = {},\n  customTransformers?: CustomTransformers\n): VirtualTypeScriptEnvironment {\n  const mergedCompilerOpts = { ...defaultCompilerOptions(ts), ...compilerOptions }\n\n  const { languageServiceHost, updateFile } = createVirtualLanguageServiceHost(\n    sys,\n    rootFiles,\n    mergedCompilerOpts,\n    ts,\n    customTransformers\n  )\n  const languageService = ts.createLanguageService(languageServiceHost)\n  const diagnostics = languageService.getCompilerOptionsDiagnostics()\n\n  if (diagnostics.length) {\n    const compilerHost = createVirtualCompilerHost(sys, compilerOptions, ts)\n    throw new Error(ts.formatDiagnostics(diagnostics, compilerHost.compilerHost))\n  }\n\n  return {\n    // @ts-ignore\n    name: \"vfs\",\n    sys,\n    languageService,\n    getSourceFile: fileName => languageService.getProgram()?.getSourceFile(fileName),\n\n    createFile: (fileName, content) => {\n      updateFile(ts.createSourceFile(fileName, content, mergedCompilerOpts.target!, false))\n    },\n    updateFile: (fileName, content, optPrevTextSpan) => {\n      const prevSourceFile = languageService.getProgram()!.getSourceFile(fileName)\n      if (!prevSourceFile) {\n        throw new Error(\"Did not find a source file for \" + fileName)\n      }\n      const prevFullContents = prevSourceFile.text\n\n      // TODO: Validate if the default text span has a fencepost error?\n      const prevTextSpan = optPrevTextSpan ?? ts.createTextSpan(0, prevFullContents.length)\n      const newText =\n        prevFullContents.slice(0, prevTextSpan.start) +\n        content +\n        prevFullContents.slice(prevTextSpan.start + prevTextSpan.length)\n      const newSourceFile = ts.updateSourceFile(prevSourceFile, newText, {\n        span: prevTextSpan,\n        newLength: content.length,\n      })\n\n      updateFile(newSourceFile)\n    },\n  }\n}\n\n/**\n * Grab the list of lib files for a particular target, will return a bit more than necessary (by including\n * the dom) but that's OK\n *\n * @param target The compiler settings target baseline\n * @param ts A copy of the TypeScript module\n */\nexport const knownLibFilesForCompilerOptions = (compilerOptions: CompilerOptions, ts: TS) => {\n  const target = compilerOptions.target || ts.ScriptTarget.ES5\n  const lib = compilerOptions.lib || []\n\n  const files = [\n    \"lib.d.ts\",\n    \"lib.dom.d.ts\",\n    \"lib.dom.iterable.d.ts\",\n    \"lib.webworker.d.ts\",\n    \"lib.webworker.importscripts.d.ts\",\n    \"lib.scripthost.d.ts\",\n    \"lib.es5.d.ts\",\n    \"lib.es6.d.ts\",\n    \"lib.es2015.collection.d.ts\",\n    \"lib.es2015.core.d.ts\",\n    \"lib.es2015.d.ts\",\n    \"lib.es2015.generator.d.ts\",\n    \"lib.es2015.iterable.d.ts\",\n    \"lib.es2015.promise.d.ts\",\n    \"lib.es2015.proxy.d.ts\",\n    \"lib.es2015.reflect.d.ts\",\n    \"lib.es2015.symbol.d.ts\",\n    \"lib.es2015.symbol.wellknown.d.ts\",\n    \"lib.es2016.array.include.d.ts\",\n    \"lib.es2016.d.ts\",\n    \"lib.es2016.full.d.ts\",\n    \"lib.es2017.d.ts\",\n    \"lib.es2017.full.d.ts\",\n    \"lib.es2017.intl.d.ts\",\n    \"lib.es2017.object.d.ts\",\n    \"lib.es2017.sharedmemory.d.ts\",\n    \"lib.es2017.string.d.ts\",\n    \"lib.es2017.typedarrays.d.ts\",\n    \"lib.es2018.asyncgenerator.d.ts\",\n    \"lib.es2018.asynciterable.d.ts\",\n    \"lib.es2018.d.ts\",\n    \"lib.es2018.full.d.ts\",\n    \"lib.es2018.intl.d.ts\",\n    \"lib.es2018.promise.d.ts\",\n    \"lib.es2018.regexp.d.ts\",\n    \"lib.es2019.array.d.ts\",\n    \"lib.es2019.d.ts\",\n    \"lib.es2019.full.d.ts\",\n    \"lib.es2019.object.d.ts\",\n    \"lib.es2019.string.d.ts\",\n    \"lib.es2019.symbol.d.ts\",\n    \"lib.es2020.d.ts\",\n    \"lib.es2020.full.d.ts\",\n    \"lib.es2020.string.d.ts\",\n    \"lib.es2020.symbol.wellknown.d.ts\",\n    \"lib.es2020.bigint.d.ts\",\n    \"lib.es2020.promise.d.ts\",\n    \"lib.es2020.sharedmemory.d.ts\",\n    \"lib.es2020.intl.d.ts\",\n    \"lib.esnext.array.d.ts\",\n    \"lib.esnext.asynciterable.d.ts\",\n    \"lib.esnext.bigint.d.ts\",\n    \"lib.esnext.d.ts\",\n    \"lib.esnext.full.d.ts\",\n    \"lib.esnext.intl.d.ts\",\n    \"lib.esnext.symbol.d.ts\",\n  ]\n\n  const targetToCut = ts.ScriptTarget[target]\n  const matches = files.filter(f => f.startsWith(`lib.${targetToCut.toLowerCase()}`))\n  const targetCutIndex = files.indexOf(matches.pop()!)\n\n  const getMax = (array: number[]) =>\n    array && array.length ? array.reduce((max, current) => (current > max ? current : max)) : undefined\n\n  // Find the index for everything in\n  const indexesForCutting = lib.map(lib => {\n    const matches = files.filter(f => f.startsWith(`lib.${lib.toLowerCase()}`))\n    if (matches.length === 0) return 0\n\n    const cutIndex = files.indexOf(matches.pop()!)\n    return cutIndex\n  })\n\n  const libCutIndex = getMax(indexesForCutting) || 0\n\n  const finalCutIndex = Math.max(targetCutIndex, libCutIndex)\n  return files.slice(0, finalCutIndex + 1)\n}\n\n/**\n * Sets up a Map with lib contents by grabbing the necessary files from\n * the local copy of typescript via the file system.\n */\nexport const createDefaultMapFromNodeModules = (compilerOptions: CompilerOptions, ts?: typeof import(\"typescript\")) => {\n  const tsModule = ts || require(\"typescript\")\n  const path = requirePath()\n  const fs = requireFS()\n\n  const getLib = (name: string) => {\n    const lib = path.dirname(require.resolve(\"typescript\"))\n    return fs.readFileSync(path.join(lib, name), \"utf8\")\n  }\n\n  const libs = knownLibFilesForCompilerOptions(compilerOptions, tsModule)\n  const fsMap = new Map<string, string>()\n  libs.forEach(lib => {\n    fsMap.set(\"/\" + lib, getLib(lib))\n  })\n  return fsMap\n}\n\n/**\n * Adds recursively files from the FS into the map based on the folder\n */\nexport const addAllFilesFromFolder = (map: Map<string, string>, workingDir: string): void => {\n  const path = requirePath()\n  const fs = requireFS()\n\n  const walk = function (dir: string) {\n    let results: string[] = []\n    const list = fs.readdirSync(dir)\n    list.forEach(function (file: string) {\n      file = path.join(dir, file)\n      const stat = fs.statSync(file)\n      if (stat && stat.isDirectory()) {\n        /* Recurse into a subdirectory */\n        results = results.concat(walk(file))\n      } else {\n        /* Is a file */\n        results.push(file)\n      }\n    })\n    return results\n  }\n\n  const allFiles = walk(workingDir)\n\n  allFiles.forEach(lib => {\n    const fsPath = \"/node_modules/@types\" + lib.replace(workingDir, \"\")\n    const content = fs.readFileSync(lib, \"utf8\")\n    const validExtensions = [\".ts\", \".tsx\"]\n\n    if (validExtensions.includes(path.extname(fsPath))) {\n      map.set(fsPath, content)\n    }\n  })\n}\n\n/** Adds all files from node_modules/@types into the FS Map */\nexport const addFilesForTypesIntoFolder = (map: Map<string, string>) =>\n  addAllFilesFromFolder(map, \"node_modules/@types\")\n\n/**\n * Create a virtual FS Map with the lib files from a particular TypeScript\n * version based on the target, Always includes dom ATM.\n *\n * @param options The compiler target, which dictates the libs to set up\n * @param version the versions of TypeScript which are supported\n * @param cache should the values be stored in local storage\n * @param ts a copy of the typescript import\n * @param lzstring an optional copy of the lz-string import\n * @param fetcher an optional replacement for the global fetch function (tests mainly)\n * @param storer an optional replacement for the localStorage global (tests mainly)\n */\nexport const createDefaultMapFromCDN = (\n  options: CompilerOptions,\n  version: string,\n  cache: boolean,\n  ts: TS,\n  lzstring?: typeof import(\"lz-string\"),\n  fetcher?: typeof fetch,\n  storer?: typeof localStorage\n) => {\n  const fetchlike = fetcher || fetch\n  const storelike = storer || localStorage\n  const fsMap = new Map<string, string>()\n  const files = knownLibFilesForCompilerOptions(options, ts)\n  const prefix = `https://typescript.azureedge.net/cdn/${version}/typescript/lib/`\n\n  function zip(str: string) {\n    return lzstring ? lzstring.compressToUTF16(str) : str\n  }\n\n  function unzip(str: string) {\n    return lzstring ? lzstring.decompressFromUTF16(str) : str\n  }\n\n  // Map the known libs to a node fetch promise, then return the contents\n  function uncached() {\n    return Promise.all(files.map(lib => fetchlike(prefix + lib).then(resp => resp.text()))).then(contents => {\n      contents.forEach((text, index) => fsMap.set(\"/\" + files[index], text))\n    })\n  }\n\n  // A localstorage and lzzip aware version of the lib files\n  function cached() {\n    const keys = Object.keys(localStorage)\n    keys.forEach(key => {\n      // Remove anything which isn't from this version\n      if (key.startsWith(\"ts-lib-\") && !key.startsWith(\"ts-lib-\" + version)) {\n        storelike.removeItem(key)\n      }\n    })\n\n    return Promise.all(\n      files.map(lib => {\n        const cacheKey = `ts-lib-${version}-${lib}`\n        const content = storelike.getItem(cacheKey)\n\n        if (!content) {\n          // Make the API call and store the text concent in the cache\n          return fetchlike(prefix + lib)\n            .then(resp => resp.text())\n            .then(t => {\n              storelike.setItem(cacheKey, zip(t))\n              return t\n            })\n        } else {\n          return Promise.resolve(unzip(content))\n        }\n      })\n    ).then(contents => {\n      contents.forEach((text, index) => {\n        const name = \"/\" + files[index]\n        fsMap.set(name, text)\n      })\n    })\n  }\n\n  const func = cache ? cached : uncached\n  return func().then(() => fsMap)\n}\n\nfunction notImplemented(methodName: string): any {\n  throw new Error(`Method '${methodName}' is not implemented.`)\n}\n\nfunction audit<ArgsT extends any[], ReturnT>(\n  name: string,\n  fn: (...args: ArgsT) => ReturnT\n): (...args: ArgsT) => ReturnT {\n  return (...args) => {\n    const res = fn(...args)\n\n    const smallres = typeof res === \"string\" ? res.slice(0, 80) + \"...\" : res\n    debugLog(\"> \" + name, ...args)\n    debugLog(\"< \" + smallres)\n\n    return res\n  }\n}\n\n/** The default compiler options if TypeScript could ever change the compiler options */\nconst defaultCompilerOptions = (ts: typeof import(\"typescript\")): CompilerOptions => {\n  return {\n    ...ts.getDefaultCompilerOptions(),\n    jsx: ts.JsxEmit.React,\n    strict: true,\n    esModuleInterop: true,\n    module: ts.ModuleKind.ESNext,\n    suppressOutputPathCheck: true,\n    skipLibCheck: true,\n    skipDefaultLibCheck: true,\n    moduleResolution: ts.ModuleResolutionKind.NodeJs,\n  }\n}\n\n// \"/DOM.d.ts\" => \"/lib.dom.d.ts\"\nconst libize = (path: string) => path.replace(\"/\", \"/lib.\").toLowerCase()\n\n/**\n * Creates an in-memory System object which can be used in a TypeScript program, this\n * is what provides read/write aspects of the virtual fs\n */\nexport function createSystem(files: Map<string, string>): System {\n  return {\n    args: [],\n    createDirectory: () => notImplemented(\"createDirectory\"),\n    // TODO: could make a real file tree\n    directoryExists: audit(\"directoryExists\", directory => {\n      return Array.from(files.keys()).some(path => path.startsWith(directory))\n    }),\n    exit: () => notImplemented(\"exit\"),\n    fileExists: audit(\"fileExists\", fileName => files.has(fileName) || files.has(libize(fileName))),\n    getCurrentDirectory: () => \"/\",\n    getDirectories: () => [],\n    getExecutingFilePath: () => notImplemented(\"getExecutingFilePath\"),\n    readDirectory: audit(\"readDirectory\", directory => (directory === \"/\" ? Array.from(files.keys()) : [])),\n    readFile: audit(\"readFile\", fileName => files.get(fileName) || files.get(libize(fileName))),\n    resolvePath: path => path,\n    newLine: \"\\n\",\n    useCaseSensitiveFileNames: true,\n    write: () => notImplemented(\"write\"),\n    writeFile: (fileName, contents) => {\n      files.set(fileName, contents)\n    },\n  }\n}\n\n/**\n * Creates a file-system backed System object which can be used in a TypeScript program, you provide\n * a set of virtual files which are prioritised over the FS versions, then a path to the root of your\n * project (basically the folder your node_modules lives)\n */\nexport function createFSBackedSystem(files: Map<string, string>, _projectRoot: string, ts: TS): System {\n  // We need to make an isolated folder for the tsconfig, but also need to be able to resolve the\n  // existing node_modules structures going back through the history\n  const root = _projectRoot + \"/vfs\"\n  const path = requirePath()\n\n  // The default System in TypeScript\n  const nodeSys = ts.sys\n  const tsLib = path.dirname(require.resolve(\"typescript\"))\n\n  return {\n    // @ts-ignore\n    name: \"fs-vfs\",\n    root,\n    args: [],\n    createDirectory: () => notImplemented(\"createDirectory\"),\n    // TODO: could make a real file tree\n    directoryExists: audit(\"directoryExists\", directory => {\n      return Array.from(files.keys()).some(path => path.startsWith(directory)) || nodeSys.directoryExists(directory)\n    }),\n    exit: nodeSys.exit,\n    fileExists: audit(\"fileExists\", fileName => {\n      if (files.has(fileName)) return true\n      // Don't let other tsconfigs end up touching the vfs\n      if (fileName.includes(\"tsconfig.json\") || fileName.includes(\"tsconfig.json\")) return false\n      if (fileName.startsWith(\"/lib\")) {\n        const tsLibName = `${tsLib}/${fileName.replace(\"/\", \"\")}`\n        return nodeSys.fileExists(tsLibName)\n      }\n      return nodeSys.fileExists(fileName)\n    }),\n    getCurrentDirectory: () => root,\n    getDirectories: nodeSys.getDirectories,\n    getExecutingFilePath: () => notImplemented(\"getExecutingFilePath\"),\n    readDirectory: audit(\"readDirectory\", (...args) => {\n      if (args[0] === \"/\") {\n        return Array.from(files.keys())\n      } else {\n        return nodeSys.readDirectory(...args)\n      }\n    }),\n    readFile: audit(\"readFile\", fileName => {\n      if (files.has(fileName)) return files.get(fileName)\n      if (fileName.startsWith(\"/lib\")) {\n        const tsLibName = `${tsLib}/${fileName.replace(\"/\", \"\")}`\n        const result = nodeSys.readFile(tsLibName)\n        if (!result) {\n          const libs = nodeSys.readDirectory(tsLib)\n          throw new Error(\n            `TSVFS: A request was made for ${tsLibName} but there wasn't a file found in the file map. You likely have a mismatch in the compiler options for the CDN download vs the compiler program. Existing Libs: ${libs}.`\n          )\n        }\n        return result\n      }\n      return nodeSys.readFile(fileName)\n    }),\n    resolvePath: path => {\n      if (files.has(path)) return path\n      return nodeSys.resolvePath(path)\n    },\n    newLine: \"\\n\",\n    useCaseSensitiveFileNames: true,\n    write: () => notImplemented(\"write\"),\n    writeFile: (fileName, contents) => {\n      files.set(fileName, contents)\n    },\n  }\n}\n\n/**\n * Creates an in-memory CompilerHost -which is essentially an extra wrapper to System\n * which works with TypeScript objects - returns both a compiler host, and a way to add new SourceFile\n * instances to the in-memory file system.\n */\nexport function createVirtualCompilerHost(sys: System, compilerOptions: CompilerOptions, ts: TS) {\n  const sourceFiles = new Map<string, SourceFile>()\n  const save = (sourceFile: SourceFile) => {\n    sourceFiles.set(sourceFile.fileName, sourceFile)\n    return sourceFile\n  }\n\n  type Return = {\n    compilerHost: CompilerHost\n    updateFile: (sourceFile: SourceFile) => boolean\n  }\n\n  const vHost: Return = {\n    compilerHost: {\n      ...sys,\n      getCanonicalFileName: fileName => fileName,\n      getDefaultLibFileName: () => \"/\" + ts.getDefaultLibFileName(compilerOptions), // '/lib.d.ts',\n      // getDefaultLibLocation: () => '/',\n      getDirectories: () => [],\n      getNewLine: () => sys.newLine,\n      getSourceFile: fileName => {\n        return (\n          sourceFiles.get(fileName) ||\n          save(\n            ts.createSourceFile(\n              fileName,\n              sys.readFile(fileName)!,\n              compilerOptions.target || defaultCompilerOptions(ts).target!,\n              false\n            )\n          )\n        )\n      },\n      useCaseSensitiveFileNames: () => sys.useCaseSensitiveFileNames,\n    },\n    updateFile: sourceFile => {\n      const alreadyExists = sourceFiles.has(sourceFile.fileName)\n      sys.writeFile(sourceFile.fileName, sourceFile.text)\n      sourceFiles.set(sourceFile.fileName, sourceFile)\n      return alreadyExists\n    },\n  }\n  return vHost\n}\n\n/**\n * Creates an object which can host a language service against the virtual file-system\n */\nexport function createVirtualLanguageServiceHost(\n  sys: System,\n  rootFiles: string[],\n  compilerOptions: CompilerOptions,\n  ts: TS,\n  customTransformers?: CustomTransformers\n) {\n  const fileNames = [...rootFiles]\n  const { compilerHost, updateFile } = createVirtualCompilerHost(sys, compilerOptions, ts)\n  const fileVersions = new Map<string, string>()\n  let projectVersion = 0\n  const languageServiceHost: LanguageServiceHost = {\n    ...compilerHost,\n    getProjectVersion: () => projectVersion.toString(),\n    getCompilationSettings: () => compilerOptions,\n    getCustomTransformers: () => customTransformers,\n    getScriptFileNames: () => fileNames,\n    getScriptSnapshot: fileName => {\n      const contents = sys.readFile(fileName)\n      if (contents) {\n        return ts.ScriptSnapshot.fromString(contents)\n      }\n      return\n    },\n    getScriptVersion: fileName => {\n      return fileVersions.get(fileName) || \"0\"\n    },\n    writeFile: sys.writeFile,\n  }\n\n  type Return = {\n    languageServiceHost: LanguageServiceHost\n    updateFile: (sourceFile: import(\"typescript\").SourceFile) => void\n  }\n\n  const lsHost: Return = {\n    languageServiceHost,\n    updateFile: sourceFile => {\n      projectVersion++\n      fileVersions.set(sourceFile.fileName, projectVersion.toString())\n      if (!fileNames.includes(sourceFile.fileName)) {\n        fileNames.push(sourceFile.fileName)\n      }\n      updateFile(sourceFile)\n    },\n  }\n  return lsHost\n}\n\nconst requirePath = () => {\n  return require(String.fromCharCode(112, 97, 116, 104)) as typeof import(\"path\")\n}\n\nconst requireFS = () => {\n  return require(String.fromCharCode(102, 115)) as typeof import(\"fs\")\n}\n","/** To ensure that errors are matched up right */\nexport function validateCodeForErrors(\n  relevantErrors: import('typescript').Diagnostic[],\n  handbookOptions: { errors: number[] },\n  extension: string,\n  originalCode: string\n) {\n  const inErrsButNotFoundInTheHeader = relevantErrors.filter(e => !handbookOptions.errors.includes(e.code))\n  const errorsFound = inErrsButNotFoundInTheHeader.map(e => e.code).join(' ')\n\n  if (inErrsButNotFoundInTheHeader.length) {\n    const codeToAdd = `// @errors: ${relevantErrors.map(e => e.code).join(' ')}`\n    const postfix = handbookOptions.errors.length\n      ? ` - the annotation specified ${handbookOptions.errors}`\n      : '\\n\\nExpected:\\n' + codeToAdd\n\n    const afterMessage = inErrsButNotFoundInTheHeader\n      .map(e => {\n        const msg = typeof e.messageText === 'string' ? e.messageText : e.messageText.messageText\n        return `[${e.code}] - ${msg}`\n      })\n      .join('\\n  ')\n\n    const codeOutput = `\\n\\n## Code\\n\\n'''${extension}\\n${originalCode}\\n'''`\n    throw new Error(\n      `Errors were thrown in the sample, but not included in an errors tag: ${errorsFound}${postfix}\\n\\n  ${afterMessage}${codeOutput}`\n    )\n  }\n}\n\n/** Mainly to warn myself, I've lost a good few minutes to this before */\nexport function validateInput(code: string) {\n  if (code.includes('// @errors ')) {\n    throw new Error(\"You have '@errors ' - you're missing the colon after errors\")\n  }\n  if (code.includes('// @filename ')) {\n    throw new Error(\"You have '@filename ' - you're missing the colon after filename\")\n  }\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 3768;\nmodule.exports = webpackEmptyContext;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 3204;\nmodule.exports = webpackEmptyContext;"],"sourceRoot":""}